#!/bin/bash
set -ue

. functions.sh

cd "$(cd "${0%/*}" && pwd -P)"

IFS=' ' read -ra versions <<<"$(get_versions . "$@")"
if [ ${#versions[@]} -eq 0 ]; then
  fatal "No valid versions found!"
fi

# Global variables
# Get architecure and use this as target architecture for docker image
# See details in function.sh
# TODO: Should be able to specify target architecture manually
arch=$(get_arch)

yarnVersion="$(curl -sSL --compressed https://yarnpkg.com/latest-version)"

function get_template_path() {
  local path=$1
  shift

  local version=${1:-}
  shift

  local variant=""
  if [[ $# -eq 1 ]]; then
    variant=$1
    shift
  fi

  if [[ "$version" == chakracore* ]]; then
    echo "chakracore/Dockerfile.template"
  elif [ -z "$variant" ]; then
    echo "$path/Dockerfile.template"
  elif [[ $variant =~ alpine ]]; then
    echo "$path/Dockerfile-alpine.template"
  else
    echo "$path/Dockerfile-$variant.template"
  fi
}

function update_node_version() {

  local baseuri=$1
  shift
  local version=$1
  shift
  local template=$1
  shift
  local dockerfile=$1
  shift
  local variant=""
  if [[ $# -eq 1 ]]; then
    variant=$1
    shift
  fi

  fullVersion="$(curl -sSL --compressed "$baseuri" | grep '<a href="v'"$version." | sed -E 's!.*<a href="v([^"/]+)/?".*!\1!' | cut -d'.' -f2,3 | sort -n | tail -1)"
  (
    cp "$template" "$dockerfile"
    local fromprefix=""
    if [[ "$arch" != "amd64" && "$variant" != "onbuild" ]]; then
      fromprefix="$arch\\/"
    fi

    sed -E -i.bak 's/^FROM (.*)/FROM '"$fromprefix"'\1/' "$dockerfile" && rm "$dockerfile".bak
    sed -E -i.bak 's/^(ENV NODE_VERSION |FROM .*node:).*/\1'"$version.${fullVersion:-0}"'/' "$dockerfile" && rm "$dockerfile".bak
    sed -E -i.bak 's/^(ENV YARN_VERSION ).*/\1'"$yarnVersion"'/' "$dockerfile" && rm "$dockerfile".bak

    # shellcheck disable=SC1004
    new_line=' \\\
'

    # Add GPG keys
    for key_type in "node" "yarn"; do
      while read -r line; do
        pattern="\"\\$\\{$(echo "$key_type" | tr '[:lower:]' '[:upper:]')_KEYS\\[@\\]\\}\""
        sed -E -i.bak -e "s/([ \\t]*)($pattern)/\\1${line}${new_line}\\1\\2/" "$dockerfile" && rm "$dockerfile".bak
      done <"keys/$key_type.keys"
      sed -E -i.bak "/$pattern/d" "$dockerfile" && rm "$dockerfile".bak
    done

    if [[ $variant =~ alpine ]]; then
      alpine_version="$(echo "$variant" | sed -En -e "s/alpine([0-9]+.[0-9]+)/\\1/p")"
      sed -E -i.bak "s/(alpine:)0.0/\\1$alpine_version/" "$dockerfile" && rm "$dockerfile".bak
    fi
  )
}

function add_stage() {
  local baseuri=$1
  shift
  local version=$1
  shift
  local variant=$1
  shift

  echo '
    - stage: Build
      env:
        - NODE_VERSION: "'"$version"'"
        - VARIANT: "'"$variant"'"' >>.travis.yml
}

echo '#### DO NOT MODIFY. THIS FILE IS AUTOGENERATED ####
' | cat - travis.yml.template >.travis.yml

for version in "${versions[@]}"; do
  # Skip "docs" and other non-docker directories
  [ -f "$version/Dockerfile" ] || continue

  info "Updating version $version..."

  parentpath=$(dirname "$version")
  versionnum=$(basename "$version")
  baseuri=$(get_config "$parentpath" "baseuri")

  # Fix for chakracore
  if [[ "$parentpath" == $(dirname "$version")* ]]; then
    parentpath=$(dirname "$parentpath")
  fi

  add_stage "$baseuri" "$version" "default"
  update_node_version "$baseuri" "$versionnum" "$(get_template_path "$parentpath" "$version")" "$version/Dockerfile" &

  # Get supported variants according the target architecture
  # See details in function.sh
  IFS=' ' read -ra variants <<<"$(get_variants "$parentpath/$version")"

  for variant in "${variants[@]}"; do
    # Skip non-docker directories
    [ -f "$version/$variant/Dockerfile" ] || continue
    add_stage "$baseuri" "$version" "$variant"
    update_node_version "$baseuri" "$versionnum" "$(get_template_path "$parentpath" "$version" "$variant")" "$version/$variant/Dockerfile" "$variant" &
  done
done

wait
info "Done!"
